/*
Задание:

Панграмма — это предложение, в котором каждая буква алфавита встречается хотя бы по одному разу без повторений. Например, предложение «The quick brown fox jumps over the lazy dog» является панграммой, поскольку в нем хотя бы один раз используются буквы от A до Z (регистр значения не имеет).

Напишите функцию isPangram, которая принимает в себя строку и возвращает логическое значение. Если строка является панграммой - вернется true, если нет - false.

Пример:

Задание:

Панграмма — это предложение, в котором каждая буква алфавита встречается хотя бы по одному разу без повторений. Например, предложение «The quick brown fox jumps over the lazy dog» является панграммой, поскольку в нем хотя бы один раз используются буквы от A до Z (регистр значения не имеет).

Напишите функцию isPangram, которая принимает в себя строку и возвращает логическое значение. Если строка является панграммой - вернется true, если нет - false.

Пример:

isPangram(«The quick brown fox jumps over the lazy dog») => true

isPangram(«Hello world») => false => true

isPangram(«Hello world») => false
*/

//? Вариант 1 убрать все пробелы, привести к нижнему регистру, удалить все повторы, отсортировать по порядку. Если длинна строки будет равна количеству букв в алфавите, возвращает true, иначе возвращает false

function isPangram(string) {
  let n  = new Set (string.split(' ').join('').toLowerCase());
  return n.size === 26 ? console.log(true) : console.log(false);
}


//? Решил задачу самостоятельно. Убрал все пробелы и привел в нижний регистр. Создал из него набор данных Set, который убрал все повторы. Сравнил с количеством букв в алфавите (26) и вернул true или false

function isPangram(string){
  string = string.toLowerCase();
  return "abcdefghijklmnopqrstuvwxyz".split("").every(function(x){
    return string.indexOf(x) !== -1 ;
  });
}
console.log(isPangram('Hello world'));
console.log(isPangram('The quick brown fox jumps over the lazy dog'));

//? В этом примере решения я привожу string к нижнему регистру. После этого весь алфавит превращаю в массив и перебираю массив с помощью метода every(), который вызывает callback функцию для каждого элемента массива и проверяет, что вернет callback функция, true или false. В моем случае, string проверяем на наличие в нем буквы алфавита (элемента массива), с помощью метода indexOf(), который возвращает -1, если не находит элемент массива в string. Получается что каждая буква алфавита проверяется на наличие в строке. Если какой-то буквы нет и метод indexOf() возвращает -1
