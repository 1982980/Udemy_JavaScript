//todo понять разницу при копировании объектов. Когда будет в копию передаваться значение, а когда ссылка на объект. Напоминаю, что объект хранится в памяти, а переменная хранит ссылку на место в памяти, где храниться объект. Поэтому возникает проблема при изменении копии переменной, будет ли меняться объект, который храниться в памяти.
//* для примитивов передается значение, но не ссылка. Поэтому при изменении переменной-копии будет изменяться и объект-примитив, так как он не хранится в памяти как чистый объект.
let a = "AAA",
  b = a;
b = b + "BBB";
console.log(b);
console.log(a);

//* для объектов(массивов, функций и тд) передается ссылка на объект хранящийся в памяти. Поэтому изменятся сам объект в памяти и все переменные, которые являются ссылками на объект в памяти, будут получать измененный вид объекта.
const obj = {
  a: 5,
  b: 1,
};
const copy = obj;
copy.a = 10;
console.log(copy);
console.log(obj);

//todo Как же работать с копией объекта чтобы не изменить оригинальный объект, который будет нам нужен в дальнейшей работе? Для этого нужно создать клон объекта, который будет храниться в памяти как самостоятельный объект и его можно будет изменять без ущерба для оригинального объекта.

//* вариант 1. Создать новый объект и с помощью цикла передать в него все свойства оригинального объекта
function getCopyObj(mainObj) {
  let copyObj = {};
  let key;
  for (key in mainObj) {
    copyObj[key] = mainObj[key];
  }
  return copyObj;
}
const numbers = {
  a: 2,
  b: 5,
  c: {
    x: 7,
    y: 4,
  },
};
let newNumbers = getCopyObj(numbers);
newNumbers.c.x = 10;
console.log(newNumbers);
console.log(numbers);
//* мы смогли склонировать объект и можем изменять его не меняя оригинальный объект, но вложенный объект по-прежнему изменяется. Так как он не склонировался, а передал ссылку на вложенный объект. Это случай называется поверхностным копированием/клонированием, когда клонируются только значения, но не вложенные объекты. Для колонирования всех вложенных в объект значений и объектов, нужно использовать другие методы.

//* вариант 2. Копирование с помощью встроенного метода Object.assign(target,firsObjectToAdd, secondObjectToAdd, ...ObjectToAdd). Это метод копирует в объект target объекты firsObjectToAdd, secondObjectToAdd, ...ObjectToAdd. Он выполняет поверхностное копирование/клонирование.
const numbers = {
  a: 2,
  b: 5,
  c: {
    x: 7,
    y: 4,
  },
};
const addNumbers = {
  d: 34,
  f: 23,
};
const newNumbers = Object.assign({}, numbers, addNumbers); //* для создания нового объекта добавляем литерал объекта {}
console.log(numbers);
console.log(newNumbers);
newNumbers.c.x = 10; // изменяем ссылочные значения (объект)
newNumbers.d = 50; // изменяем переданные значения (примитивы)
console.log(newNumbers);
console.log(addNumbers);
console.log(numbers);

//* пример работы с массивами
//* вариант 3. для клонирования массивов. встроенный метод для массивов slice(). Этот метод также создает поверхностную копию/клон массива
const oldArray = ["a", "b", "c"];
oldArray[3] = {
  a: 2,
  b: 4,
}; //добавили объект в массив
const newArray = oldArray.slice(); // создали копию массива
newArray[1] = "asadsfasdf"; //изменяем переданное значение в копии массива
newArray[3].a = 10; // изменяем ссылку на объект в копии массива => изменятся объект в памяти

console.log(oldArray);
console.log(newArray);

//* вариант 4. Встроенный оператор spread. Этот оператор копирует и разворачивает все вложенные элементы в одноуровневую структуру. Вложенные объекты предаются ссылками и поэтому изменяют вложенный объект. В этом варианте мы объединяем несколько массивов или объектов и можем добавлять свои значения

const video = { a: "youtube", b: "vimeo", c: "rutube" },
  blogs = {
    d: "wordpress",
    f: "livejournal",
    j: "blogger",
    g: {
      1: "kjh",
      2: "qqq",
    },
  },
  internet = { ...video, ...blogs, k: 56, l: 4 };
internet.g[1] = 34;
console.log(blogs);
console.log(internet);
//пример использования оператора spread
function log(a, b, c) {
  console.log(a);
  console.log(b);
  console.log(c);
}

const ex = ["aaa", "bbb", "ccc"];
log(...ex); //используем оператор spread чтобы развернуть все элементы массива или объекта и передать в функцию

//* вариант 5. Поверхностное копирование/клонирование с помощью оператора spread для массивов и объектов без других объектов или массивов

const array = ["a", "b"];
const newArr = [...array];
console.log(newArr);

const obj = {
  one: 1,
  two: 2,
};
const newObj = { ...obj };
console.log(newObj);
